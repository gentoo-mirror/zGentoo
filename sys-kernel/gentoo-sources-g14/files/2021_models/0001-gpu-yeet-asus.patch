From 27cfea5fa647d0b3cb09813f48b47c357a9fddb0 Mon Sep 17 00:00:00 2001
From: Luke D Jones <luke@ljones.dev>
Date: Sun, 28 Mar 2021 10:51:01 +1300
Subject: [PATCH] gpu-yeet-asus

---
 drivers/platform/x86/asus-wmi.c            | 105 +++++++++++++++++++++
 include/linux/platform_data/x86/asus-wmi.h |   3 +
 2 files changed, 108 insertions(+)

diff --git a/drivers/platform/x86/asus-wmi.c b/drivers/platform/x86/asus-wmi.c
index 9ca15f724343..9e606f9bd793 100644
--- a/drivers/platform/x86/asus-wmi.c
+++ b/drivers/platform/x86/asus-wmi.c
@@ -213,6 +213,9 @@ struct asus_wmi {
 	// The RSOC controls the maximum charging percentage.
 	bool battery_rsoc_available;
 
+	bool dgpu_yeet_available;
+	u8 dgpu_yeet_mode;
+
 	struct hotplug_slot hotplug_slot;
 	struct mutex hotplug_lock;
 	struct mutex wmi_lock;
@@ -421,6 +424,98 @@ static void lid_flip_tablet_mode_get_state(struct asus_wmi *asus)
 	}
 }
 
+/* dGPU ********************************************************************/
+static int dgpu_yeet_check_present(struct asus_wmi *asus)
+{
+	u32 result;
+	int err;
+
+	asus->dgpu_yeet_available = false;
+
+	err = asus_wmi_get_devstate(asus,
+				    ASUS_WMI_DEVID_DGPU,
+				    &result);
+	if (err) {
+		if (err == -ENODEV)
+			return 0;
+		return err;
+	}
+
+	if (result & ASUS_WMI_DSTS_PRESENCE_BIT)
+		asus->dgpu_yeet_available = true;
+
+	return 0;
+}
+
+static int dgpu_yeet_write(struct asus_wmi *asus)
+{
+	int err;
+	u8 value;
+	u32 retval;
+
+	value = asus->dgpu_yeet_mode;
+
+	err = asus_wmi_set_devstate(ASUS_WMI_DEVID_DGPU,
+				    value, &retval);
+
+	sysfs_notify(&asus->platform_device->dev.kobj, NULL,
+			"dgpu_yeet");
+
+	if (err) {
+		pr_warn("Failed to set dgpu yeet: %d\n", err);
+		return err;
+	}
+
+	if (retval > 1 || retval < 0) {
+		pr_warn("Failed to set dgpu yeet (retval): 0x%x\n",
+			retval);
+		return -EIO;
+	}
+
+	return 0;
+}
+
+static int dgpu_yeet_set_default(struct asus_wmi *asus)
+{
+	if (!asus->dgpu_yeet_available)
+		return 0;
+    // Default to 0 so that the dGPU is available
+	asus->dgpu_yeet_mode = 0;
+	return dgpu_yeet_write(asus);
+}
+
+static ssize_t dgpu_yeet_show(struct device *dev,
+				   struct device_attribute *attr, char *buf)
+{
+	struct asus_wmi *asus = dev_get_drvdata(dev);
+	u8 mode = asus->dgpu_yeet_mode;
+
+	return scnprintf(buf, PAGE_SIZE, "%d\n", mode);
+}
+
+static ssize_t dgpu_yeet_store(struct device *dev,
+				    struct device_attribute *attr,
+				    const char *buf, size_t count)
+{
+	int result;
+	u8 yeet;
+	struct asus_wmi *asus = dev_get_drvdata(dev);
+
+	result = kstrtou8(buf, 10, &yeet);
+	if (result < 0)
+		return result;
+
+	if (yeet > 1 || yeet < 0)
+		return -EINVAL;
+
+	asus->dgpu_yeet_mode = yeet;
+	dgpu_yeet_write(asus);
+
+	return count;
+}
+
+static DEVICE_ATTR_RW(dgpu_yeet);
+
 /* Battery ********************************************************************/
 
 /* The battery maximum charging percentage */
@@ -2329,6 +2424,7 @@ static struct attribute *platform_attributes[] = {
 	&dev_attr_als_enable.attr,
 	&dev_attr_fan_boost_mode.attr,
 	&dev_attr_throttle_thermal_policy.attr,
+	&dev_attr_dgpu_yeet.attr,
 	NULL
 };
 
@@ -2354,6 +2450,8 @@ static umode_t asus_sysfs_is_visible(struct kobject *kobj,
 		ok = asus->fan_boost_mode_available;
 	else if (attr == &dev_attr_throttle_thermal_policy.attr)
 		ok = asus->throttle_thermal_policy_available;
+	else if (attr == &dev_attr_dgpu_yeet.attr)
+		ok = asus->dgpu_yeet_available;
 
 	if (devid != -1)
 		ok = !(asus_wmi_get_devstate_simple(asus, devid) < 0);
@@ -2619,6 +2717,12 @@ static int asus_wmi_add(struct platform_device *pdev)
 	else
 		throttle_thermal_policy_set_default(asus);
 
+	err = dgpu_yeet_check_present(asus);
+	if (err)
+		goto fail_dgpu_yeet;
+	else
+		dgpu_yeet_set_default(asus);
+
 	err = asus_wmi_sysfs_init(asus->platform_device);
 	if (err)
 		goto fail_sysfs;
@@ -2706,6 +2810,7 @@ static int asus_wmi_add(struct platform_device *pdev)
 fail_throttle_thermal_policy:
 fail_fan_boost_mode:
 fail_platform:
+fail_dgpu_yeet:
 	kfree(asus);
 	return err;
 }
diff --git a/include/linux/platform_data/x86/asus-wmi.h b/include/linux/platform_data/x86/asus-wmi.h
index 2f274cf52805..7d8d3e9c45d6 100644
--- a/include/linux/platform_data/x86/asus-wmi.h
+++ b/include/linux/platform_data/x86/asus-wmi.h
@@ -89,6 +89,9 @@
 /* Keyboard dock */
 #define ASUS_WMI_DEVID_KBD_DOCK		0x00120063
 
+/* dgpu on/off */
+#define ASUS_WMI_DEVID_DGPU		0x00090020
+
 /* DSTS masks */
 #define ASUS_WMI_DSTS_STATUS_BIT	0x00000001
 #define ASUS_WMI_DSTS_UNKNOWN_BIT	0x00000002
-- 
2.30.2

