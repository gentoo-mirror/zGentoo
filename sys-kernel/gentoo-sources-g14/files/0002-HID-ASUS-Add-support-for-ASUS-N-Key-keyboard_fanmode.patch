--- a/drivers/hid/hid-asus.c
+++ b/drivers/hid/hid-asus.c
@@ -125,6 +125,7 @@
 	int battery_stat;
 	bool battery_in_query;
 	unsigned long battery_next_query;
+	u64 asus_raw_event_fan_last_query;
 };
 
 static int asus_report_battery(struct asus_drvdata *, u8 *, int);
@@ -321,6 +322,29 @@
 	return 0;
 }
 
+/*
+ * This enables triggering events in asus-wmi
+ */
+static int asus_wmi_send_event(struct asus_drvdata *drvdat, u8 code)
+{
+	int err;
+	u32 retval;
+
+	err = asus_wmi_evaluate_method(ASUS_WMI_METHODID_DEVS,
+		0x00100021, code, &retval);
+	if (err) {
+		pr_warn("Failed to notify asus-wmi: %d\n", err);
+		return err;
+	}
+
+	if (retval != 0) {
+		pr_warn("Failed to notify asus-wmi (retval): 0x%x\n", retval);
+		return -EIO;
+	}
+
+	return 0;
+}
+
 static int asus_raw_event(struct hid_device *hdev,
 		struct hid_report *report, u8 *data, int size)
 {
@@ -353,7 +354,20 @@
 			if (data[1] == 0xea || data[1] == 0xec || data[1] == 0x02 ||
 					data[1] == 0x8a || data[1] == 0x9e) {
 				return -1;
-			}
+			} else if (data[1] == 0xae) { // fanmode
+				/* burst intervall limit in ms - 500 seems to be safe*/
+				if (drvdata->asus_raw_event_fan_last_query + 500 * 1000000 
+						< ktime_get_ns()) {
+					drvdata->asus_raw_event_fan_last_query = ktime_get_ns();
+					if (asus_wmi_send_event(drvdata, data[1]) < 0)
+						hid_warn(hdev, 
+							"Asus failed to trigger fan control event");
+				} else {
+					hid_warn(hdev, 
+						"Asus trigger fan control event repeated to fast");
+ 				}
+ 				return -1;
+ 			}
 		}
 	}
 
@@ -860,9 +874,6 @@
 		/* Fn+F5 "fan" symbol on FX503VD */
 		case 0x99: asus_map_key_clear(KEY_PROG4);		break;
 
-		/* Fn+F5 "fan" symbol on N-Key keyboard */
-		case 0xae: asus_map_key_clear(KEY_PROG4);		break;
-
 		/* Fn+Ret "Calc" symbol on N-Key keyboard */
 		case 0x92: asus_map_key_clear(KEY_CALC);		break;
 
