--- a/src/gui/creds/webflowcredentials.cpp	2019-11-04 22:48:42.000000000 +0100
+++ b/src/gui/creds/webflowcredentials.cpp	2019-12-08 14:07:03.594747226 +0100
@@ -420,7 +420,7 @@
         _credentialsValid = true;

         /// Used later for remote wipe
-        _account->setAppPassword(_password);
+        _account->writeAppPasswordOnce(_password);
     }
 }

--- a/src/libsync/account.cpp	2019-11-04 22:48:42.000000000 +0100
+++ b/src/libsync/account.cpp	2019-12-08 14:08:52.267733388 +0100
@@ -513,7 +513,10 @@
     }
 }

-void Account::setAppPassword(QString appPassword){
+void Account::writeAppPasswordOnce(QString appPassword){
+    if(_wroteAppPassword)
+        return;
+
     const QString kck = AbstractCredentials::keychainKey(
                 url().toString(),
                 davUser() + app_password,
@@ -524,8 +527,9 @@
     job->setInsecureFallback(false);
     job->setKey(kck);
     job->setBinaryData(appPassword.toLatin1());
-    connect(job, &WritePasswordJob::finished, [](Job *) {
-        qCInfo(lcAccount) << "appPassword stored in keychain";
+    connect(job, &WritePasswordJob::finished, [this](Job *) {
+        qCInfo(lcAccount) << "appPassword stored in keychain";
+        _wroteAppPassword = true;
     });
     job->start();
 }
@@ -540,7 +544,7 @@
     ReadPasswordJob *job = new ReadPasswordJob(Theme::instance()->appName());
     job->setInsecureFallback(false);
     job->setKey(kck);
-    connect(job, &WritePasswordJob::finished, [this](Job *incoming) {
+    connect(job, &ReadPasswordJob::finished, [this](Job *incoming) {
         ReadPasswordJob *readJob = static_cast<ReadPasswordJob *>(incoming);
         QString pwd("");
         // Error or no valid public key error out
--- a/src/libsync/account.h	2019-11-04 22:48:42.000000000 +0100
+++ b/src/libsync/account.h	2019-12-08 14:10:06.115045206 +0100
@@ -243,7 +243,7 @@

     /// Used in RemoteWipe
     void retrieveAppPassword();
-    void setAppPassword(QString appPassword);
+    void writeAppPasswordOnce(QString appPassword);
     void deleteAppPassword();

 public slots:
@@ -319,6 +319,8 @@
     QString _davPath; // defaults to value from theme, might be overwritten in brandings
     ClientSideEncryption _e2e;

+    bool _wroteAppPassword = false; // Used in RemoteWipe
+
     friend class AccountManager;
 };
 }
