diff --git a/.gitignore b/.gitignore
index a63622c..604ede8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,4 +1,5 @@
 __pycache__/
 build/
 optimus_manager.egg-info/
-
+.idea/
+.venv/
diff --git a/README.md b/README.md
index 3bb51de..79f07c4 100644
--- a/README.md
+++ b/README.md
@@ -3,11 +3,11 @@ optimus-manager
 
 **IMPORTANT :** this README is for version v1.3. If you are still using the previous version (v1.2), the corresponding README is available here : https://github.com/Askannz/optimus-manager/wiki/v1.2-README
 
-This Linux program provides a solution for GPU switching on Optimus laptops (i.e laptops with a dual Nvidia/Intel GPU configuration).
+This Linux program provides a solution for GPU switching on Optimus laptops (i.e laptops with a dual Nvidia/Intel GPU or Nvidia/AMD configuration).
 
 Obviously this is unofficial, I am not affiliated with Nvidia in any way.
 
-**Only Archlinux and Archlinux-based distributions (such as Manjaro) are supported for now.**
+**Only VoidLinux, Archlinux and Archlinux-based distributions (such as Manjaro) are supported for now.**
 Only Xorg sessions are supported (no Wayland).
 
 Supported display managers are : SDDM, LightDM, GDM.
@@ -16,9 +16,9 @@ optimus-manager can also work with other display managers (or with no display ma
 
 Introduction
 ----------
-GPU offloading and power management with Nvidia cards are not properly supported on Linux ([though there has been some great progress recently](https://devtalk.nvidia.com/default/topic/1060977/announcements-and-news/-linux-solaris-and-freebsd-driver-435-17-beta-release-/)), which can make it hard to use your Optimus laptop at full performance. optimus-manager provides a workaround to this problem by allowing you to run your whole desktop session on the Nvidia GPU, while the Intel GPU only acts as a "relay" between the Nvidia GPU and your screen.
+GPU offloading and power management with Nvidia cards are not properly supported on Linux ([though there has been some great progress recently](https://devtalk.nvidia.com/default/topic/1060977/announcements-and-news/-linux-solaris-and-freebsd-driver-435-17-beta-release-/)), which can make it hard to use your Optimus laptop at full performance. optimus-manager provides a workaround to this problem by allowing you to run your whole desktop session on the Nvidia GPU, while the Intel/AMD GPU only acts as a "relay" between the Nvidia GPU and your screen.
 
-This is essentially a port to Archlinux of the **nvidia-prime** solution created by Canonical for Ubuntu.
+This is essentially a port to VoidLinux and Archlinux of the **nvidia-prime** solution created by Canonical for Ubuntu.
 
 To learn more about the current Optimus situation on Linux and how this solution works, read the [Home Wiki page](https://github.com/Askannz/optimus-manager/wiki).
 
@@ -28,7 +28,13 @@ IMPORTANT : Gnome and GDM users
 
 If you use Gnome or the Gnome Display Manager (GDM), there are a couple extra requirements to be able to use optimus-manager :
 
-* The default `gdm` package from the Archlinux and Manjaro repositories is not compatible with optimus-manager, so you must replace it with this patched version : [gdm-prime](https://aur.archlinux.org/packages/gdm-prime/) (also replaces `libgdm`). The patch was written by Canonical for Ubuntu and simply adds two script entry points specifically for Prime switching. The package is otherwise identical to the official one.
+* The default `gdm` package from the Archlinux, Manjaro and Voidlinux repositories is not compatible with optimus-manager, so you must replace it with this patched version: 
+
+Arch: [gdm-prime](https://aur.archlinux.org/packages/gdm-prime/) (also replaces `libgdm`)
+
+Void: NOTE: you must install gdm first as the gnome package has a dependency on it, then install gdm-prime. clone my void-packages repo: [gdm-prime](https://github.com/Hyper-KVM/void-packages/tree/gdm-prime) (also replaces `libgdm`) 
+
+The patch was written by Canonical for Ubuntu and simply adds two script entry points specifically for Prime switching. The package is otherwise identical to the official one.
 
 * Gnome launches Wayland sessions by default, which are incompatible with optimus-manager. To force Xorg sessions, You need to edit the file `/etc/gdm/custom.conf` and remove the `#` before the line `#WaylandEnable=false`.
 
@@ -45,9 +51,31 @@ Installation
 
 Naturally, you must have the proprietary nvidia driver installed on your system. On Archlinux, you can use the packages `nvidia` or `nvidia-dkms`. On Manjaro, it is fine to use the built-in driver utility.
 
-You can install optimus-manager from this AUR package : [optimus-manager](https://aur.archlinux.org/packages/optimus-manager/)
+You can install optimus-manager by cloning this repo and doing: `cd package` and `makepkg -si`
+
+The PKGBUILD will autodetect your init system and install the files needed for it with your choice of Display Manager (LightDM, SDDM and No Display Manager).
+
+For VoidLinux, you will need to clone my [void-packages](https://github.com/Hyper-KVM/void-packages) repo for now and use xbps-src to install.
+
+**NOTE FOR RUNIT:**
+
+To use optimus-manager on Void linux OR Artix-runit, you'll also need to install the corresponding DM package script for the DM you use, which is currently
+
+The service scripts are different from the ones that come with the Display Manager, you MUST disable the current display manager script first, then enable the optimus-manager one.
+
+for example: `sudo rm -rf /var/service/sddm && sudo ln -s /etc/sv/optimus-manager-sddm /var/service/`
 
-After installation, the optimus-manager daemon should have been started automatically, but you can check its status with `systemctl status optimus-manager.service`.
+Void: optimus-manager-lightdm and optimus-manager-sddm. 
+
+Artix: optimus-manager-runit-lightdm and optimus-manager-sddm.
+
+After installation, the optimus-manager daemon should have been started automatically, but you can check its status with:
+
+systemd:`systemctl status optimus-manager.service` 
+
+OpenRC:`rc-service optimus-manager status` 
+
+runit:`sv s optimus-manager`.
 
 **Important notes :**
 
@@ -74,15 +102,21 @@ To uninstall the program, simply remove the `optimus-manager` package. The auto-
 
 You can also force cleanup by running `optimus-manager --cleanup`.
 
-You can also disable optimus-manager by disabling the systemd service `optimus-manager.service` (needs a reboot to be applied).
+You can also disable optimus-manager by disabling the service:
+
+systemd:`optimus-manager.service` 
+
+OpenRC/runit:`optimus-manager` (needs a reboot to be applied).
 
 Usage
 ----------
 
 Run
 * `optimus-manager --switch nvidia` to switch to the Nvidia GPU
-* `optimus-manager --switch intel` to switch to the Intel GPU and power the Nvidia GPU off
-* `optimus-manager --switch hybrid` to switch to the Intel GPU but leave the Nvidia GPU available for on-demand offloading, similar to how Optimus works on Windows. See [the Wiki](https://github.com/Askannz/optimus-manager/wiki/Nvidia-GPU-offloading-for-%22hybrid%22-mode) for more details.
+* `optimus-manager --switch igpu` to switch to the iGPU and power the Nvidia GPU off
+* `optimus-manager --switch hybrid` to switch to the iGPU but leave the Nvidia GPU available for on-demand offloading, similar to how Optimus works on Windows. See [the Wiki](https://github.com/Askannz/optimus-manager/wiki/Nvidia-GPU-offloading-for-%22hybrid%22-mode) for more details
+
+(Note: `auto` and `ac_auto` are deprecated and removed from the -git version)
 
 *WARNING :* Switching mode automatically logs you out, so make sure you save your work and close all your applications before doing so.
 
@@ -126,7 +160,7 @@ The default configuration file can be found at `/usr/share/optimus-manager.conf`
 
 Any parameter not specified in your config file will take value from the default file. Remember to include the section headers of the options you override.
 
-Please refer to the comments in the [default config file](https://github.com/Askannz/optimus-manager/blob/master/optimus-manager.conf) for descriptions of the available parameters. In particular, it is possible to set common Xorg options like DRI version or triple buffering, as well as some kernel module loading options.
+Please refer to the comments in the [default config file](https://github.com/Hyper-KVM/optimus-manager/blob/master/optimus-manager.conf) for descriptions of the available parameters. In particular, it is possible to set common Xorg options like DRI version or triple buffering, as well as some kernel module loading options.
 
 No config changes will be effective until you computer is rebooted or the optimus-manager service is restarted.
 
diff --git a/config/xorg-igpu.conf b/config/xorg-igpu.conf
new file mode 100644
index 0000000..8931676
--- /dev/null
+++ b/config/xorg-igpu.conf
@@ -0,0 +1,14 @@
+# You can use this file to add Xorg options which are not covered in the configuration file.
+#
+# Everything you put here will go to the "Device" section corresponding
+# to the iGPU in the Xorg configuration.
+# Lines starting with # are ignored.
+#
+# Example :
+#
+# Intel iGPU
+# Option "Backlight" "intel_backlight"
+#
+# AMD iGPU
+# Option "Backlight" "amdgpu_bl1"
+
diff --git a/config/xsetup-igpu.sh b/config/xsetup-igpu.sh
new file mode 100644
index 0000000..7ab8eab
--- /dev/null
+++ b/config/xsetup-igpu.sh
@@ -0,0 +1,3 @@
+#!/bin/sh
+
+# Everything you write here will be executed by the display manager when setting up the login screen in igpu mode.
diff --git a/openrc/optimus-manager b/openrc/optimus-manager
new file mode 100644
index 0000000..1300514
--- /dev/null
+++ b/openrc/optimus-manager
@@ -0,0 +1,32 @@
+#!/usr/bin/openrc-run
+
+command="/usr/bin/python3 -u -m optimus_manager.daemon"
+pidfile=${pidfile-/var/run/optimus-manager.pid}
+description="Optimus Manager Commands daemon"
+
+depend() {
+    before xdm
+    after elogind
+}
+
+start_pre() {
+    /usr/bin/python3 -u -m optimus_manager.hooks.pre_daemon_start || return $?
+    /usr/bin/python3 -u -m optimus_manager.hooks.pre_xorg_start || return $?
+}
+
+start() {
+    ebegin "Starting Optimus Manager daemon"
+    start-stop-daemon --quiet --background --start --exec $command \
+       --make-pidfile --pidfile $pidfile -- ""
+    eend $? "Failed to start Optimus Manager daemon"
+}
+
+stop() {
+    ebegin "Stopping Optimus Manager daemon"
+    start-stop-daemon --quiet --stop --pidfile $pidfile --signal QUIT
+    eend $? "Failed to stop Optimus Manager daemon"
+}
+
+stop_post() {
+	/usr/bin/python3 -u -m optimus_manager.hook.post_daemon_stop || return $?
+}
diff --git a/optimus-manager.conf b/optimus-manager.conf
index c66a518..222b50e 100644
--- a/optimus-manager.conf
+++ b/optimus-manager.conf
@@ -39,32 +39,33 @@ pci_reset=no
 # GPU switching only becomes effective at the next graphical session login.
 auto_logout=yes
 
-# GPU mode to use at computer startup. Possible values: nvidia, intel, hybrid, auto
+# GPU mode to use at computer startup. Possible values: nvidia, igpu, hybrid, auto
 # "auto" is a special mode that auto-detects if the computer is running on battery
 # and selects a proper GPU mode. See the other options below.
-startup_mode=intel
+startup_mode=igpu
 # GPU mode to select when startup_mode=auto and the computer is running on battery.
-# Possible values: nvidia, intel, hybrid
-startup_auto_battery_mode=intel
+# Possible values: nvidia, igpu, hybrid
+startup_auto_battery_mode=igpu
 # GPU mode to select when startup_mode=auto and the computer is running on external power.
-# Possible values: nvidia, intel, hybrid
+# Possible values: nvidia, igpu, hybrid
 startup_auto_extpower_mode=nvidia
 
 
-[intel]
+[igpu]
 
-# Driver to use for the Intel GPU. Possible values : modesetting, intel
+# Driver to use for the iGPU. Possible values : modesetting, xorg
 # To use the intel driver, you need to install the package "xf86-video-intel".
+# To use the amd driver, you need to install the package "xf86-video-amdgpu".
 driver=modesetting
 
 # Acceleration method (corresponds to AccelMethod in the Xorg configuration).
-# Only applies to the intel driver.
+# Only applies to intel GPU.
 # Possible values : sna, xna, uxa
 # Leave blank for the default (no option specified)
 accel=
 
 # Enable TearFree option in the Xorg configuration.
-# Only applies to the intel driver.
+# Only applies to the xorg driver.
 # Possible values : yes, no
 # Leave blank for the default (no option specified)
 tearfree=
@@ -73,10 +74,18 @@ tearfree=
 DRI=3
 
 # Whether or not to enable modesetting for the nouveau driver.
-# Does not affect modesetting for the Intel GPU driver !
+# Does not affect modesetting for the iGPU driver !
 # This option only matters if you use nouveau as the switching backend.
 modeset=yes
 
+# Enable Reverse PRIME aka Display Offload Sink Support for the NVIDIA GPU, requires Xorg version 1.20.7 and higher.
+# Requires NVIDIA Driver version 450.57 and higher.
+# Only applies to hybrid mode.
+# Possible values : yes, no
+# Leave blank for the default (no option specified)
+reverseprime=
+
+
 [nvidia]
 
 # Whether or not to enable modesetting. Required for PRIME Synchronization (which prevents tearing).
diff --git a/optimus_manager/checks.py b/optimus_manager/checks.py
index 0f95b70..ccf57bd 100644
--- a/optimus_manager/checks.py
+++ b/optimus_manager/checks.py
@@ -1,4 +1,5 @@
 import os
+import psutil
 from pathlib import Path
 import re
 import dbus
@@ -43,7 +44,10 @@ def get_active_renderer():
     if _is_gl_provider_nvidia():
         return "nvidia"
     else:
-        return "intel"
+        if check_offloading_available():
+            return "hybrid-" + get_integrated_gpu()
+        else:
+            return get_integrated_gpu()
 
 
 def is_module_available(module_name):
@@ -64,7 +68,32 @@ def is_module_loaded(module_name):
     else:
         return True
 
-def get_current_display_manager():
+def detect_os():
+    return os.path.isdir("/run/runit/service")
+
+def _detect_init_system():
+
+    process = psutil.Process(1)
+    process_name = process.name()
+    
+    if process_name == "runit":
+        if detect_os():
+            init = "runit-artix"
+        else:
+            init = "runit-void"
+    elif process_name == "systemd":
+        init = "systemd"
+    elif process_name == "openrc-init":
+        init ="openrc"
+
+    return init
+
+def get_current_display_manager(init):
+
+    if not init == "systemd":
+        return _get_openrc_display_manager(init)
+    else:
+        pass
 
     if not os.path.isfile("/etc/systemd/system/display-manager.service"):
         raise CheckError("No display-manager.service file found")
@@ -76,6 +105,23 @@ def get_current_display_manager():
     return dm_name
 
 
+def _get_openrc_display_manager(init):
+
+    if not init == "openrc":
+        return using_patched_GDM()
+    else:
+        pass
+
+    if not os.path.isfile("/etc/init.d/xdm"):
+        raise CheckError("No xdm init script fle found")
+
+    dm_service_path = os.path.realpath("/etc/init.d/xdm")
+    dm_service_filename = os.path.split(dm_service_path)[-1]
+    dm_name = os.path.splitext(dm_service_filename)[0]
+
+    return dm_name
+
+
 def using_patched_GDM():
 
     folder_path_1 = "/etc/gdm/Prime"
@@ -88,25 +134,54 @@ def check_offloading_available():
     try:
         out = exec_bash("xrandr --listproviders")
     except BashError as e:
-        raise CheckError("Cannot list xrand providers : %s" % str(e))
+        raise CheckError("Cannot list xrandr providers : %s" % str(e))
 
     for line in out.splitlines():
         if re.search("^Provider [0-9]+:", line) and "name:NVIDIA-G0" in line:
             return True
     return False
 
+def get_integrated_provider():
+
+    try:
+        provider = exec_bash("xrandr --listproviders | egrep -io \"name:.*AMD.*|name:.*Intel.*\" | sed 's/name://;s/^/\"/;s/$/\"/'")
+    except BashError as e:
+        raise CheckError("Cannot find Intel or AMD in xrandr providers : %s" % str(e))
+    return provider
 
 def is_xorg_intel_module_available():
     return os.path.isfile("/usr/lib/xorg/modules/drivers/intel_drv.so")
 
+def is_xorg_amd_module_available():
+    return os.path.isfile("/usr/lib/xorg/modules/drivers/amdgpu_drv.so")
 
 def is_login_manager_active():
     return _is_service_active("display-manager")
 
+def is_elogind_active():
+    return _is_service_active("elogind")
+    
+def is_lxdm_active():
+    return _is_service_active("lxdm")
 
-def is_daemon_active():
-    return _is_service_active("optimus-manager")
+def is_daemon_active(init):
 
+    if init == "runit-artix":
+        try:
+            exec_bash("pgrep -a python3 | grep -o optimus_manager")
+        except BashError:
+            return False
+        else:
+            return True
+    elif init == "runit-void":
+        try:
+            exec_bash("pgrep -a python3 | grep  -o optimus_manager")
+        except BashError:
+            return False
+        else:
+            return True
+    else:
+        return _is_service_active("optimus-manager")
 
 def is_bumblebeed_service_active():
     return _is_service_active("bumblebeed")
@@ -124,8 +199,26 @@ def _is_gl_provider_nvidia():
     return False
 
 
+def _is_elogind_present():
+    return os.path.isfile("/usr/lib/libelogind.so.0")
+
+
+def get_integrated_gpu():
+
+    try:
+        exec_bash("glxinfo | awk '/Vendor:/{print $2}'| grep 'X.Org'")
+        return "amd"
+    except BashError:
+        return "intel"
+
+
 def _is_service_active(service_name):
 
+    if _is_elogind_present():
+        return _is_service_active_bash(service_name)
+    else:
+        pass
+
     logger = get_logger()
 
     try:
@@ -138,6 +231,7 @@ def _is_service_active(service_name):
     else:
         return _is_service_active_dbus(system_bus, service_name)
 
+
 def _is_service_active_dbus(system_bus, service_name):
 
     systemd = system_bus.get_object("org.freedesktop.systemd1", "/org/freedesktop/systemd1")
@@ -156,9 +250,28 @@ def _is_service_active_dbus(system_bus, service_name):
 
 def _is_service_active_bash(service_name):
 
-    try:
-        exec_bash("systemctl is-active %s" % service_name)
-    except BashError:
-        return False
-    else:
-        return True
+    init = _detect_init_system()
+
+    if init == "systemd":
+        try:
+            exec_bash("systemctl is-active %s" % service_name)
+        except BashError:
+            return False
+        else:
+            return True
+
+    elif init == "openrc":
+        try:
+            exec_bash("rc-service %s status" % service_name)
+        except BashError:
+            return False
+        else:
+            return True
+
+    elif init in ["runit-void", "runit-artix"]:
+        try:
+            exec_bash("pgrep -a %s" % service_name)
+        except BashError:
+            return False
+        else:
+            return True
diff --git a/optimus_manager/client/__init__.py b/optimus_manager/client/__init__.py
index 4485d55..8f061ee 100644
--- a/optimus_manager/client/__init__.py
+++ b/optimus_manager/client/__init__.py
@@ -14,7 +14,9 @@
 from .args import parse_args
 from .utils import ask_confirmation
 from .error_reporting import report_errors
-from .client_checks import run_switch_checks
+from .client_checks import run_switch_checks, _check_daemon_active
+from ..pci import get_available_igpu
+from ..checks import _detect_init_system
 
 
 def main():
@@ -22,6 +24,8 @@ def main():
     args = parse_args()
     state = load_state()
     fatal = report_errors(state)
+    igpu = get_available_igpu()
+    init = _detect_init_system()
 
     config = _get_config()
 
@@ -41,8 +45,8 @@ def main():
     else:
 
         if fatal:
-            print("Cannot execute command because of previous errors.")
-            sys.exit(1)
+            print("Cannot execute command because of previous errors.\n")
+            return _check_daemon_active(init)
 
         if args.print_mode:
             _print_current_mode(state)
@@ -51,7 +55,7 @@ def main():
         elif args.status:
             _print_status(config, state)
         elif args.switch:
-            _gpu_switch(config, args.switch, args.no_confirm)
+            _gpu_switch(config, args.switch, args.no_confirm, igpu, init)
         else:
             print("Invalid arguments.")
             sys.exit(1)
@@ -59,13 +63,13 @@ def main():
     sys.exit(0)
 
 
-def _gpu_switch(config, switch_mode, no_confirm):
+def _gpu_switch(config, switch_mode, no_confirm, igpu, init):
 
-    if switch_mode not in ["intel", "nvidia", "hybrid"]:
+    if switch_mode not in ["igpu", "nvidia", "hybrid"]:
         print("Invalid mode : %s" % switch_mode)
         sys.exit(1)
 
-    run_switch_checks(config, switch_mode)
+    run_switch_checks(config, switch_mode, igpu, init)
 
     if config["optimus"]["auto_logout"] == "yes":
 
@@ -174,9 +178,20 @@ def _send_command(command):
 
     except (ConnectionRefusedError, OSError):
         print("Cannot connect to the UNIX socket at %s. Is optimus-manager-daemon running ?\n"
-              "\nYou can enable and start it by running those commands as root :\n"
-              "\nsystemctl enable optimus-manager.service\n"
-              "systemctl start optimus-manager.service\n" % envs.SOCKET_PATH)
+            "\nYou can enable and start it by running those commands as root :\n")
+        if _detect_init_system(init="systemd"):
+            print("\nsystemctl enable optimus-manager.service\n"
+                "systemctl start optimus-manager.service\n" % envs.SOCKET_PATH)
+        elif _detect_init_system(init="openrc"):
+            print("\nrc-update add optimus-manager default\n"
+                "rc-service optimus-manager start\n" % envs.SOCKET_PATH)
+        elif _detect_init_system(init="runit"):
+            if checks.detect_os():
+                print("ln -s /etc/runit/sv/optimus-manager /var/run/runit/service\n"
+                    "sv u optimus-manager\n" % envs.SOCKET_PATH)
+            elif not checks.detect_os():
+                print("ln -s /etc/sv/optimus-manager /var/service\n"
+                    "sv u optimus-manager\n" % envs.SOCKET_PATH)
         sys.exit(1)
 
 def _set_temp_config_and_exit(rel_path):
diff --git a/optimus_manager/client/args.py b/optimus_manager/client/args.py
index 5a33d7f..af7a68f 100644
--- a/optimus_manager/client/args.py
+++ b/optimus_manager/client/args.py
@@ -18,7 +18,7 @@ def parse_args():
 
     parser.add_argument('--switch', metavar='MODE', action='store',
                         help="Set the GPU mode to MODE. You need to log out then log in to apply the change."
-                             "Possible modes : intel, nvidia, hybrid")
+                             "Possible modes : igpu, nvidia, amd, hybrid")
     parser.add_argument('--set-startup', metavar='STARTUP_MODE', action='store',
                         help="Deprecated argument. Set the startup mode through the configuration file instead.")
 
diff --git a/optimus_manager/client/client_checks.py b/optimus_manager/client/client_checks.py
index 0407b40..f8966aa 100644
--- a/optimus_manager/client/client_checks.py
+++ b/optimus_manager/client/client_checks.py
@@ -3,29 +3,49 @@
 from ..xorg import is_there_a_default_xorg_conf_file, is_there_a_MHWD_file
 from .. import sessions
 from .utils import ask_confirmation
+from ..pci import get_available_igpu
 
 
-def run_switch_checks(config, requested_mode):
+def run_switch_checks(config, requested_mode, igpu, init):
 
-    _check_daemon_active()
+    _check_elogind_active(init)
+    _check_daemon_active(init)
     _check_power_switching(config)
     _check_bbswitch_module(config)
     _check_nvidia_module(requested_mode)
-    _check_patched_GDM()
+    _check_patched_GDM(init)
     _check_wayland()
     _check_bumblebeed()
     _check_xorg_conf()
     _check_MHWD_conf()
-    _check_intel_xorg_module(config, requested_mode)
+    _check_intel_xorg_module(config, requested_mode, igpu)
+    _check_amd_xorg_module(config, requested_mode, igpu)
     _check_number_of_sessions()
 
 
-def _check_daemon_active():
+def _check_elogind_active(init):
 
-    if not checks.is_daemon_active():
-        print("The optimus-manager service is not running. Please enable and start it with :\n\n"
-              "sudo systemctl enable optimus-manager\n"
-              "sudo systemctl start optimus-manager\n")
+    if not checks.is_elogind_active() and not init == "systemd":
+        print("The Elogind service was not detected but is required to use optimus-manager, please install, enable and start it.")
+        sys.exit(1)
+
+
+def _check_daemon_active(init):
+
+    if not checks.is_daemon_active(init):
+        print("The optimus-manager service is not running. Please enable and start it with :\n")
+        if init == "openrc":
+            print("sudo rc-service enable optimus-manager\n"
+                  "sudo rc-service start optimus-manager\n")
+        elif init == "runit-void":
+            print("sudo ln -s /etc/sv/optimus-manager /var/service\n")
+        elif init == "runit-artix":
+            print("sudo ln -s /etc/runit/sv/optimus-manager /run/runit/service\n")
+        elif init == "systemd":
+            print("sudo systemctl enable optimus-manager\n"
+                  "sudo systemctl start optimus-manager\n")
+        else:
+            print("ERROR: unsupported init system detected!")
         sys.exit(1)
 
 def _check_power_switching(config):
@@ -58,10 +78,10 @@ def _check_nvidia_module(requested_mode):
         if not confirmation:
             sys.exit(0)
 
-def _check_patched_GDM():
+def _check_patched_GDM(init):
 
     try:
-        dm_name = checks.get_current_display_manager()
+        dm_name = checks.get_current_display_manager(init)
     except checks.CheckError as e:
         print("ERROR : cannot get current display manager name : %s" % str(e))
         return
@@ -135,18 +155,33 @@ def _check_MHWD_conf():
         if not confirmation:
             sys.exit(0)
 
-def _check_intel_xorg_module(config, requested_mode):
+def _check_intel_xorg_module(config, requested_mode, igpu):
 
-    if requested_mode == "intel" and config["intel"]["driver"] == "intel" and not checks.is_xorg_intel_module_available():
-        print("WARNING : The Xorg driver \"intel\" is selected in the configuration file but this driver is not installed."
-              " optimus-manager will default to the \"modesetting\" driver instead. You can install the \"intel\" driver from"
-              " the package \"xf86-video-intel.\"\n"
-              "Continue ? (y/N)")
+    if igpu == "intel":
+        if requested_mode == "igpu" and config["igpu"]["driver"] == "xorg" and not checks.is_xorg_intel_module_available():
+            print("WARNING : The Xorg driver \"intel\" is selected in the configuration file but this driver is not installed."
+                " optimus-manager will default to the \"modesetting\" driver instead. You can install the \"intel\" driver from"
+                " the package \"xf86-video-intel.\"\n"
+                "Continue ? (y/N)")
 
-        confirmation = ask_confirmation()
+            confirmation = ask_confirmation()
 
-        if not confirmation:
-            sys.exit(0)
+            if not confirmation:
+                sys.exit(0)
+
+def _check_amd_xorg_module(config, requested_mode, igpu):
+
+    if igpu == "amd":
+        if requested_mode == "igpu" and config["igpu"]["driver"] == "xorg" and not checks.is_xorg_amd_module_available():
+            print("WARNING : The Xorg driver \"amdgpu\" is selected in the configuration file but this driver is not installed."
+                " optimus-manager will default to the \"modesetting\" driver instead. You can install the \"amdgpu\" driver from"
+                " the package \"xf86-video-amdgpu\".\n"
+                "Continue ? (y/N)")
+
+            confirmation = _ask_confirmation()
+
+            if not confirmation:
+                sys.exit(0)
 
 def _check_number_of_sessions():
 
diff --git a/optimus_manager/client/error_reporting.py b/optimus_manager/client/error_reporting.py
index e314b04..ae1b61e 100644
--- a/optimus_manager/client/error_reporting.py
+++ b/optimus_manager/client/error_reporting.py
@@ -1,11 +1,12 @@
 from .. import envs
+from ..pci import get_available_igpu
 from ..checks import get_active_renderer, check_offloading_available, CheckError
 
 
 def report_errors(state):
 
     if state is None:
-        print("ERROR: no state file found. Is optimus-manager.service running ?")
+        print("ERROR: no state file found.")
         return True
 
     elif state["type"] == "startup_failed":
@@ -42,12 +43,18 @@ def report_errors(state):
         return True
 
     elif state["type"] == "done":
-
-        expected_renderer = {
-            "intel": "intel",
-            "hybrid": "intel",
-            "nvidia": "nvidia"
-        }[state["current_mode"]]
+        if get_available_igpu() == "amd":
+            expected_renderer = {
+                "igpu": "amd",
+                "hybrid": "hybrid-amd",
+                "nvidia": "nvidia",
+            }[state["current_mode"]]
+        elif get_available_igpu() == "intel":
+            expected_renderer = {
+                "igpu": "intel",
+                "hybrid": "hybrid-intel",
+                "nvidia": "nvidia",
+            }[state["current_mode"]]
 
         try:
             active_renderer = get_active_renderer()
@@ -63,7 +70,7 @@ def report_errors(state):
             print("Log at %s/switch/switch-%s.log" % (envs.LOG_DIR_PATH, state["switch_id"]))
             return True
 
-        if state["current_mode"] == "hybrid" and not check_offloading_available():
+        if state["current_mode"] in ["hybrid-intel", "hybrid-amd"] and not check_offloading_available():
             print("WARNING: hybrid mode is set but Nvidia card does not seem to be available for offloading.")
             print("Log at %s/switch/switch-%s.log" % (envs.LOG_DIR_PATH, state["switch_id"]))
 
diff --git a/optimus_manager/config.py b/optimus_manager/config.py
index 5d5ede2..663fe45 100644
--- a/optimus_manager/config.py
+++ b/optimus_manager/config.py
@@ -8,7 +8,6 @@
 from . import var
 from .log_utils import get_logger
 
-
 class ConfigError(Exception):
     pass
 
@@ -226,7 +225,7 @@ def load_extra_xorg_options():
 
         try:
             config_lines = _load_extra_xorg_file(path)
-            logger.info("Loaded extra Intel Xorg options (%d lines)", len(config_lines))
+            logger.info("Loaded extra Xorg options (%d lines)", len(config_lines))
             xorg_extra[mode] = config_lines
         except FileNotFoundError:
             pass
diff --git a/optimus_manager/config_schema.json b/optimus_manager/config_schema.json
index 5756658..ae361c8 100644
--- a/optimus_manager/config_schema.json
+++ b/optimus_manager/config_schema.json
@@ -6,18 +6,20 @@
 		"pci_remove": ["single_word", ["yes", "no"], false],
 		"pci_reset": ["single_word", ["no", "function_level", "hot_reset"], false],
 		"auto_logout": ["single_word", ["yes", "no"], false],
-		"startup_mode": ["single_word", ["intel", "hybrid", "nvidia", "auto"], false],
-		"startup_auto_battery_mode": ["single_word", ["intel", "hybrid", "nvidia"], false],
-		"startup_auto_extpower_mode": ["single_word", ["intel", "hybrid", "nvidia"], false]
+		"startup_mode": ["single_word", ["igpu", "hybrid", "nvidia", "auto"], false],
+		"startup_auto_battery_mode": ["single_word", ["igpu", "hybrid", "nvidia"], false],
+		"startup_auto_extpower_mode": ["single_word", ["igpu", "hybrid", "nvidia"], false]
+
 	},
 
-	"intel":
+	"igpu":
 	{
-		"driver": ["single_word", ["modesetting", "intel"], false],
+		"driver": ["single_word", ["modesetting", "xorg"], false],
 		"accel": ["single_word", ["sna", "xna", "uxa"], true],
 		"tearfree": ["single_word", ["yes", "no"], true],
 		"dri": ["single_word", ["2", "3"], false],
-		"modeset": ["single_word", ["yes", "no"], false]
+		"modeset": ["single_word", ["yes", "no"], false],
+		"reverseprime": ["single_word", ["yes", "no"], true]
 	},
 
 	"nvidia":
diff --git a/optimus_manager/envs.py b/optimus_manager/envs.py
index 4d4bdd1..6312214 100644
--- a/optimus_manager/envs.py
+++ b/optimus_manager/envs.py
@@ -1,4 +1,4 @@
-VERSION = "1.3"
+VERSION = "1.3.5"
 
 SOCKET_PATH = "/tmp/optimus-manager"
 SOCKET_TIMEOUT = 1.0
@@ -13,22 +13,23 @@
 USER_CONFIG_COPY_PATH = "%s/config_copy.conf" % TMP_VARS_FOLDER_PATH
 CURRENT_DAEMON_RUN_ID = "%s/daemon_run_id" % TMP_VARS_FOLDER_PATH
 
-
 XORG_CONF_PATH = "/etc/X11/xorg.conf.d/10-optimus-manager.conf"
 
 DEFAULT_CONFIG_PATH = "/usr/share/optimus-manager.conf"
 USER_CONFIG_PATH = "/etc/optimus-manager/optimus-manager.conf"
 
 EXTRA_XORG_OPTIONS_PATHS = {
-    "intel": "/etc/optimus-manager/xorg-intel.conf",
+    "intel": "/etc/optimus-manager/xorg-igpu.conf",
+    "amd": "/etc/optimus-manager/xorg-igpu.conf",
     "nvidia": "/etc/optimus-manager/xorg-nvidia.conf",
-    "hybrid": "/etc/optimus-manager/xorg-hybrid.conf"
+    "hybrid": "/etc/optimus-manager/xorg-hybrid.conf",
 }
 
 XSETUP_SCRIPTS_PATHS = {
-    "intel": "/etc/optimus-manager/xsetup-intel.sh",
+    "intel": "/etc/optimus-manager/xsetup-igpu.sh",
+    "amd": "/etc/optimus-manager/xsetup-igpu.sh",
     "nvidia": "/etc/optimus-manager/xsetup-nvidia.sh",
-    "hybrid": "/etc/optimus-manager/xsetup-hybrid.sh"
+    "hybrid": "/etc/optimus-manager/xsetup-hybrid.sh",
 }
 
 NVIDIA_MANUAL_ENABLE_SCRIPT_PATH = "/etc/optimus-manager/nvidia-enable.sh"
diff --git a/optimus_manager/hacks/gdm.py b/optimus_manager/hacks/gdm.py
index e7b81fa..299b2fc 100644
--- a/optimus_manager/hacks/gdm.py
+++ b/optimus_manager/hacks/gdm.py
@@ -1,5 +1,7 @@
 from .. import processes
 from ..log_utils import get_logger
+from ..checks import _detect_init_system, using_patched_GDM
+from ..bash import BashError, exec_bash
 
 
 def kill_gdm_server():
@@ -8,14 +10,27 @@ def kill_gdm_server():
 
     logger.info("Checking for GDM display servers")
 
-    try:
-        xorg_PIDs_list = processes.get_PIDs_from_process_names(["Xorg", "X"])
+    if using_patched_GDM():
+        try:
+            xorg_PIDs_list = processes.get_PIDs_from_process_names(["Xorg", "X"])
 
-        for PID_value in xorg_PIDs_list:
-            user = processes.get_PID_user(PID_value)
-            if user == "gdm":
-                logger.info("Found a Xorg GDM process (PID %d), killing it...", PID_value)
-                processes.kill_PID(PID_value, signal="-KILL")
+            for PID_value in xorg_PIDs_list:
+                user = processes.get_PID_user(PID_value)
+                if user == "gdm" or user == "root":
+                    logger.info("Found a Xorg GDM process (PID %d), killing it...", PID_value)
+                    processes.kill_PID(PID_value, signal="-KILL")
 
-    except processes.ProcessesError as e:
-        raise RuntimeError("Error : cannot check for or kill the GDM display server : %s" % str(e))
+        except processes.ProcessesError as e:
+            raise RuntimeError("Error : cannot check for or kill the GDM display server : %s" % str(e))
+
+def restart_gdm_server():
+
+    logger = get_logger()
+    init = _detect_init_system()
+
+    if using_patched_GDM() and init == "runit-void" or init == "runit-artix":
+        try:
+            logger.info("Restarting GDM server")
+            exec_bash("sv restart gdm")
+        except BashError:
+            pass
diff --git a/optimus_manager/hooks/post_xorg_start.py b/optimus_manager/hooks/post_xorg_start.py
index 39b8bfc..c9b60cc 100644
--- a/optimus_manager/hooks/post_xorg_start.py
+++ b/optimus_manager/hooks/post_xorg_start.py
@@ -1,8 +1,9 @@
 import sys
 from ..config import load_config
 from .. import var
-from ..xorg import do_xsetup, set_DPI
+from ..xorg import do_xsetup
 from ..log_utils import set_logger_config, get_logger
+from ..pci import get_available_igpu
 
 
 def main():
@@ -10,7 +11,7 @@ def main():
     prev_state = var.load_state()
 
     if prev_state is None or prev_state["type"] != "pending_post_xorg_start":
-        return
+            return
 
     switch_id = prev_state["switch_id"]
 
@@ -18,15 +19,16 @@ def main():
     logger = get_logger()
 
     requested_mode = None
+    igpu = get_available_igpu()
 
     try:
         logger.info("# Xorg post-start hook")
 
         requested_mode = prev_state["requested_mode"]
 
-        do_xsetup(requested_mode)
         config = load_config()
-        set_DPI(config)
+        do_xsetup(config, requested_mode, igpu)
+        
 
         state = {
             "type": "done",
diff --git a/optimus_manager/hooks/pre_xorg_start.py b/optimus_manager/hooks/pre_xorg_start.py
index f596014..706c2f4 100644
--- a/optimus_manager/hooks/pre_xorg_start.py
+++ b/optimus_manager/hooks/pre_xorg_start.py
@@ -3,7 +3,7 @@
 from ..kernel import setup_kernel_state
 from .. import var
 from ..xorg import configure_xorg, cleanup_xorg_conf
-from ..hacks.gdm import kill_gdm_server
+from ..hacks.gdm import kill_gdm_server, restart_gdm_server
 from ..log_utils import set_logger_config, get_logger
 
 
@@ -44,6 +44,7 @@ def main():
         if setup_kernel:
             setup_kernel_state(config, prev_state, requested_mode)
         configure_xorg(config, requested_mode)
+        restart_gdm_server()
 
         state = {
             "type": "pending_post_xorg_start",
diff --git a/optimus_manager/kernel.py b/optimus_manager/kernel.py
index f27eb5c..26913bb 100644
--- a/optimus_manager/kernel.py
+++ b/optimus_manager/kernel.py
@@ -5,6 +5,7 @@
 from .acpi_data import ACPI_STRINGS
 from .bash import exec_bash, BashError
 from .log_utils import get_logger
+from .pci import get_available_igpu
 
 class KernelSetupError(Exception):
     pass
@@ -12,15 +13,15 @@ class KernelSetupError(Exception):
 
 def setup_kernel_state(config, prev_state, requested_mode):
 
-    assert requested_mode in ["intel", "nvidia", "hybrid"]
+    assert requested_mode in ["igpu", "nvidia", "hybrid"]
     assert prev_state["type"] == "pending_pre_xorg_start"
 
     current_mode = prev_state["current_mode"]
 
-    if current_mode in ["intel", None] and requested_mode in ["nvidia", "hybrid"]:
+    if current_mode in ["igpu", None] and requested_mode in ["nvidia", "hybrid"]:
         _nvidia_up(config)
 
-    elif current_mode in ["nvidia", "hybrid", None] and requested_mode == "intel":
+    elif current_mode in ["nvidia", "hybrid", None] and requested_mode == "igpu":
         _nvidia_down(config)
 
 
@@ -84,6 +85,8 @@ def _nvidia_down(config):
         else:
             logger.info("Removing Nvidia from PCI bus")
             _try_remove_pci()
+            logger.info("Removing Nvidia Audio from PCI bus")
+            _try_remove_audio_pci()
 
 
     if config["optimus"]["pci_power_control"] == "yes":
@@ -110,7 +113,9 @@ def _load_nvidia_modules(config, available_modules):
     _load_module(available_modules, "nvidia_drm", options="modeset=%d" % modeset_value)
 
 def _load_nouveau(config, available_modules):
-    modeset_value = 1 if config["intel"]["modeset"] == "yes" else 0
+
+    modeset_value = 1 if config["igpu"]["modeset"] == "yes" else 0
+
     _load_module(available_modules, "nouveau", options="modeset=%d" % modeset_value)
 
 def _try_load_nouveau(config, available_modules):
@@ -271,6 +276,18 @@ def _set_acpi_call_state(state):
     var.write_last_acpi_call_state(state)
     var.write_acpi_call_strings(working_strings)
 
+def _try_remove_audio_pci():
+
+    logger = get_logger()
+
+    try:
+        pci.remove_nvidia_audio()
+    except pci.PCIError as e:
+        logger.error(
+            "Cannot remove Nvidia Audio from PCI bus. Continuing anyways. Error is: %s", str(e))
+
+
+
 def _try_remove_pci():
 
     logger = get_logger()
diff --git a/optimus_manager/kernel_parameters.py b/optimus_manager/kernel_parameters.py
index b64b409..93a0e2f 100644
--- a/optimus_manager/kernel_parameters.py
+++ b/optimus_manager/kernel_parameters.py
@@ -13,7 +13,7 @@ def get_kernel_parameters():
         if re.fullmatch("optimus-manager\\.startup=[^ ]+", item):
             logger.info("Kernel parameter found: %s", item)
             startup_mode = item.split("=")[-1]
-            if startup_mode not in ["intel", "nvidia", "hybrid", "auto"]:
+            if startup_mode not in ["igpu", "nvidia", "hybrid", "auto"]:
                 logger.error(
                     "Invalid startup mode in kernel parameter : \"%s\"."
                     " Ignored.", startup_mode)
diff --git a/optimus_manager/pci.py b/optimus_manager/pci.py
index b05ab3f..1373001 100644
--- a/optimus_manager/pci.py
+++ b/optimus_manager/pci.py
@@ -5,8 +5,11 @@
 
 NVIDIA_VENDOR_ID = "10de"
 INTEL_VENDOR_ID = "8086"
+AMD_VENDOR_ID = "1002"
+
 
 GPU_PCI_CLASS_PATTERN = "03[0-9a-f]{2}"
+AUDIO_PCI_CLASS_PATTERN = "04[0-9a-f]{2}"
 PCI_BRIDGE_PCI_CLASS_PATTERN = "0604"
 
 
@@ -57,6 +60,9 @@ def hot_reset_nvidia():
     if not is_nvidia_visible():
         raise PCIError("failed to bring Nvidia card back")
 
+def remove_nvidia_audio():
+    _write_to_nvidia_audio_path("remove", "1")
+
 def remove_nvidia():
     _write_to_nvidia_path("remove", "1")
 
@@ -71,6 +77,20 @@ def rescan():
     _write_to_pci_path("/sys/bus/pci/rescan", "1")
 
 
+def get_audio_bus_ids(notation_fix=True):
+
+    logger = get_logger()
+
+    nvidia_audio_ids_list = _get_audio_bus_ids(match_audio_pci_class=AUDIO_PCI_CLASS_PATTERN,
+                                        match_vendor_id=NVIDIA_VENDOR_ID,
+                                        notation_fix=notation_fix)
+
+    audio_bus_ids = {}
+    if len(nvidia_audio_ids_list) > 0:
+        audio_bus_ids["nvidia_audio"] = nvidia_audio_ids_list[0]
+
+    return audio_bus_ids
+
 def get_gpus_bus_ids(notation_fix=True):
 
     logger = get_logger()
@@ -83,20 +103,62 @@ def get_gpus_bus_ids(notation_fix=True):
                                   match_vendor_id=INTEL_VENDOR_ID,
                                   notation_fix=notation_fix)
 
+    amd_ids_list = _get_bus_ids(match_pci_class=GPU_PCI_CLASS_PATTERN,
+                                  match_vendor_id=AMD_VENDOR_ID,
+                                  notation_fix=notation_fix)
+
     if len(nvidia_ids_list) > 1:
         logger.warning("Multiple Nvidia GPUs found ! Picking the first one.")
 
     if len(intel_ids_list) > 1:
         logger.warning("Multiple Intel GPUs found ! Picking the first one.")
 
+    if len(amd_ids_list) > 1:
+        print("WARNING : Multiple AMD GPUs found ! Picking the first one.")
+
     bus_ids = {}
     if len(nvidia_ids_list) > 0:
         bus_ids["nvidia"] = nvidia_ids_list[0]
     if len(intel_ids_list) > 0:
         bus_ids["intel"] = intel_ids_list[0]
+    if len(amd_ids_list) > 0:
+        bus_ids["amd"] = amd_ids_list[0]
 
     return bus_ids
 
+
+def _get_audio_bus_ids(match_audio_pci_class, match_vendor_id, notation_fix=True):
+
+    try:
+        out = exec_bash("lspci -n")
+    except BashError as e:
+        raise PCIError("cannot run lspci -n : %s" % str(e))
+
+    audio_bus_ids_list = []
+
+    for line in out.splitlines():
+
+        items = line.split(" ")
+
+        audio_bus_id = items[0]
+
+        if notation_fix:
+            # Xorg expects bus IDs separated by colons in decimal instead of
+            # hexadecimal format without any leading zeroes and prefixed with
+            # `PCI:`, so `3c:00:0` should become `PCI:60:0:0`
+            audio_bus_id = "PCI:" + ":".join(
+                str(int(field, 16)) for field in re.split("[.:]", audio_bus_id)
+            )
+
+        vendor_id, _ = items[2].split(":")
+        audio_pci_class = items[1][:-1]
+
+        if re.fullmatch(match_vendor_id, vendor_id) and re.fullmatch(match_audio_pci_class, audio_pci_class):
+            audio_bus_ids_list.append(audio_bus_id)
+
+    return audio_bus_ids_list
+
+
 def _get_bus_ids(match_pci_class, match_vendor_id, notation_fix=True):
 
     try:
@@ -129,6 +191,55 @@ def _get_bus_ids(match_pci_class, match_vendor_id, notation_fix=True):
     return bus_ids_list
 
 
+def get_available_igpu(notation_fix=True):
+    
+    try:
+        lspci_output = exec_bash("lspci -n")
+    except BashError as e:
+        raise PCIError("cannot run lspci -n : %s" % str(e))
+
+    detected_igpu = "intel"
+
+    for line in lspci_output.splitlines():
+        items = line.split(" ")
+        bus_id = items[0]
+
+        if notation_fix:
+            # Xorg expects bus IDs separated by colons in decimal instead of
+            # hexadecimal format without any leading zeroes and prefixed with
+            # `PCI:`, so `3c:00:0` should become `PCI:60:0:0`
+            bus_id = "PCI:" + ":".join(
+                str(int(field, 16)) for field in re.split("[.:]", bus_id)
+            )
+
+        pci_class = items[1][:-1]
+        vendor_id, _ = items[2].split(":")
+
+        if re.fullmatch(GPU_PCI_CLASS_PATTERN, pci_class) and re.fullmatch(AMD_VENDOR_ID, vendor_id):
+            detected_igpu = "amd"
+
+    return detected_igpu
+
+
+def _write_to_nvidia_audio_path(relative_path, string):
+
+    audio_bus_ids = get_audio_bus_ids(notation_fix=False)
+
+    if "nvidia_audio" not in audio_bus_ids.keys():
+        raise PCIError("Nvidia Audio not in PCI bus")
+
+    absolute_path = "/sys/bus/pci/devices/0000:%s/%s" % (audio_bus_ids["nvidia_audio"], relative_path)
+    _write_to_pci_path(absolute_path, string)
+
+def _read_from_nvidia_audio_path(relative_path):
+
+    audio_bus_ids = get_audio_bus_ids(notation_fix=False)
+
+    if "nvidia_audio" not in audio_bus_ids.keys():
+        raise PCIError("Nvidia Audio not in PCI bus")
+
+    absolute_path = "/sys/bus/pci/devices/0000:%s/%s" % (audio_bus_ids["nvidia_audio"], relative_path)
+    return _read_pci_path(absolute_path)
 
 def _write_to_nvidia_path(relative_path, string):
 
diff --git a/optimus_manager/var.py b/optimus_manager/var.py
index b69289a..516e56a 100644
--- a/optimus_manager/var.py
+++ b/optimus_manager/var.py
@@ -10,7 +10,6 @@
 class VarError(Exception):
     pass
 
-
 def read_temp_conf_path_var():
 
     filepath = Path(envs.TEMP_CONFIG_PATH_VAR_PATH)
diff --git a/optimus_manager/xorg.py b/optimus_manager/xorg.py
index a727bac..69f2a42 100644
--- a/optimus_manager/xorg.py
+++ b/optimus_manager/xorg.py
@@ -2,27 +2,28 @@
 from pathlib import Path
 from optimus_manager.bash import exec_bash, BashError
 import optimus_manager.envs as envs
-from .pci import get_gpus_bus_ids
+from .pci import get_gpus_bus_ids, get_available_igpu
 from .config import load_extra_xorg_options
 from .hacks.manjaro import remove_mhwd_conf
 from .log_utils import get_logger
-
+from .checks import get_integrated_provider
 
 class XorgSetupError(Exception):
     pass
 
-
+    
 def configure_xorg(config, requested_gpu_mode):
 
     bus_ids = get_gpus_bus_ids()
     xorg_extra = load_extra_xorg_options()
+    igpu = get_available_igpu()
 
     if requested_gpu_mode == "nvidia":
-        xorg_conf_text = _generate_nvidia(config, bus_ids, xorg_extra)
-    elif requested_gpu_mode == "intel":
-        xorg_conf_text = _generate_intel(config, bus_ids, xorg_extra)
+        xorg_conf_text = _generate_nvidia(config, bus_ids, xorg_extra, igpu)
+    elif requested_gpu_mode == "igpu":
+        xorg_conf_text = _generate_igpu(config, bus_ids, xorg_extra, igpu)
     elif requested_gpu_mode == "hybrid":
-        xorg_conf_text = _generate_hybrid(config, bus_ids, xorg_extra)
+        xorg_conf_text = _generate_hybrid(config, bus_ids, xorg_extra, igpu)
 
     remove_mhwd_conf()
     _write_xorg_conf(xorg_conf_text)
@@ -65,30 +66,32 @@ def is_there_a_MHWD_file():
     return os.path.isfile("/etc/X11/xorg.conf.d/90-mhwd.conf")
 
 
-def do_xsetup(requested_mode):
+def do_xsetup(config, requested_mode, igpu):
 
     logger = get_logger()
 
     if requested_mode == "nvidia":
-
         logger.info("Running xrandr commands")
 
         try:
-            exec_bash("xrandr --setprovideroutputsource modesetting NVIDIA-0")
+            provider = get_integrated_provider()
+            if config["igpu"]["driver"] == "modesetting":
+                exec_bash("xrandr --setprovideroutputsource modesetting NVIDIA-0")
+            else:
+                exec_bash("xrandr --setprovideroutputsource %s NVIDIA-0" % provider)
             exec_bash("xrandr --auto")
         except BashError as e:
             logger.error("Cannot setup PRIME : %s", str(e))
-
-    script_path = envs.XSETUP_SCRIPTS_PATHS[requested_mode]
+    if requested_mode == "igpu":
+        script_path = envs.XSETUP_SCRIPTS_PATHS[igpu]
+    else:
+        script_path = envs.XSETUP_SCRIPTS_PATHS[requested_mode]
     logger.info("Running %s", script_path)
     try:
         exec_bash(script_path)
     except BashError as e:
         logger.error("ERROR : cannot run %s : %s", script_path, str(e))
 
-
-def set_DPI(config):
-
     dpi_str = config["nvidia"]["dpi"]
 
     if dpi_str == "":
@@ -100,7 +103,7 @@ def set_DPI(config):
         raise XorgSetupError("Cannot set DPI : %s" % str(e))
 
 
-def _generate_nvidia(config, bus_ids, xorg_extra):
+def _generate_nvidia(config, bus_ids, xorg_extra, igpu):
 
     text = "Section \"Files\"\n" \
            "\tModulePath \"/usr/lib/nvidia\"\n" \
@@ -114,9 +117,12 @@ def _generate_nvidia(config, bus_ids, xorg_extra):
 
     text += "Section \"ServerLayout\"\n" \
             "\tIdentifier \"layout\"\n" \
-            "\tScreen 0 \"nvidia\"\n" \
-            "\tInactive \"intel\"\n" \
-            "EndSection\n\n"
+            "\tScreen 0 \"nvidia\"\n"
+    if igpu == "intel":
+        text += "\tInactive \"intel\"\n"
+    elif igpu == "amd":
+        text += "\tInactive \"amd\"\n"
+    text += "EndSection\n\n"
 
     text += _make_nvidia_device_section(config, bus_ids, xorg_extra)
 
@@ -130,56 +136,105 @@ def _generate_nvidia(config, bus_ids, xorg_extra):
 
     text += "EndSection\n\n"
 
-    text += "Section \"Device\"\n" \
-            "\tIdentifier \"intel\"\n" \
-            "\tDriver \"modesetting\"\n"
-    text += "\tBusID \"%s\"\n" % bus_ids["intel"]
+    #text += "Section \"Device\"\n"
+    if igpu == "intel":
+        text += _make_intel_device_section(config, bus_ids, xorg_extra)
+    elif igpu == "amd":
+        text += _make_amd_device_section(config, bus_ids, xorg_extra)
+    ## TODO: check if this is mandatorily required (and if so, generalize it for Intel/AMD) :
+    #text += "\tBusID \"%s\"\n" % bus_ids["intel"] \  # (between "Driver" and "EndSection")
+
+    text += "Section \"Screen\"\n"
+    if igpu == "intel":
+        text += "\tIdentifier \"intel\"\n" \
+                "\tDevice \"intel\"\n"
+    elif igpu == "amd":
+        text += "\tIdentifier \"amd\"\n" \
+                "\tDevice \"amdgpu\"\n"
     text += "EndSection\n\n"
 
-    text += "Section \"Screen\"\n" \
-            "\tIdentifier \"intel\"\n" \
-            "\tDevice \"intel\"\n" \
-            "EndSection\n\n"
-
     text += _make_server_flags_section(config)
 
     return text
 
 
-def _generate_intel(config, bus_ids, xorg_extra):
-    text = _make_intel_device_section(config, bus_ids, xorg_extra)
-    return text
+def _generate_igpu(config, bus_ids, xorg_extra, igpu):
+    if igpu == "intel":
+        text = _make_intel_device_section(config, bus_ids, xorg_extra)
+        return text
 
-def _generate_hybrid(config, bus_ids, xorg_extra):
+    elif igpu == "amd":
+        text = _make_amd_device_section(config, bus_ids, xorg_extra)
+        return text
 
-    text = "Section \"ServerLayout\"\n" \
-           "\tIdentifier \"layout\"\n" \
-           "\tScreen 0 \"intel\"\n" \
-           "\tInactive \"nvidia\"\n" \
-           "\tOption \"AllowNVIDIAGPUScreens\"\n" \
-           "EndSection\n\n"
 
-    text += _make_intel_device_section(config, bus_ids, xorg_extra)
+def _generate_hybrid(config, bus_ids, xorg_extra, igpu):
 
-    text += "Section \"Screen\"\n" \
-           "\tIdentifier \"intel\"\n" \
-           "\tDevice \"intel\"\n"
+    if igpu == "intel":
+        text = "Section \"ServerLayout\"\n" \
+               "\tIdentifier \"layout\"\n" \
+               "\tScreen 0 \"intel\"\n" \
+               "\tInactive \"nvidia\"\n"
+        if config["igpu"]["reverseprime"] != "":
+            reverseprime_enabled_str = {"yes": "true", "no": "false"}[config["igpu"]["reverseprime"]]
+            text += "\tOption \"AllowPRIMEDisplayOffloadSink\" \"%s\"\n" % reverseprime_enabled_str
+        text += "\tOption \"AllowNVIDIAGPUScreens\"\n" \
+                "EndSection\n\n"
 
-    if config["nvidia"]["allow_external_gpus"] == "yes":
-        text += "\tOption \"AllowExternalGpus\"\n"
+        text += _make_intel_device_section(config, bus_ids, xorg_extra)
 
-    text += "EndSection\n\n"
+        text += "Section \"Screen\"\n" \
+                "\tIdentifier \"intel\"\n" \
+                "\tDevice \"intel\"\n"
 
-    text += _make_nvidia_device_section(config, bus_ids, xorg_extra)
+        if config["nvidia"]["allow_external_gpus"] == "yes":
+            text += "\tOption \"AllowExternalGpus\"\n"
 
-    text += "Section \"Screen\"\n" \
-           "\tIdentifier \"nvidia\"\n" \
-           "\tDevice \"nvidia\"\n" \
-           "EndSection\n\n"
+        text += "EndSection\n\n"
 
-    text += _make_server_flags_section(config)
+        text += _make_nvidia_device_section(config, bus_ids, xorg_extra)
 
-    return text
+        text += "Section \"Screen\"\n" \
+                "\tIdentifier \"nvidia\"\n" \
+                "\tDevice \"nvidia\"\n" \
+                "EndSection\n\n"
+
+        text += _make_server_flags_section(config)
+
+        return text
+
+    elif igpu == "amd":
+        text = "Section \"ServerLayout\"\n" \
+               "\tIdentifier \"layout\"\n" \
+               "\tScreen 0 \"amd\"\n" \
+               "\tInactive \"nvidia\"\n"
+        if config["igpu"]["reverseprime"] != "":
+            reverseprime_enabled_str = {"yes": "true", "no": "false"}[config["igpu"]["reverseprime"]]
+            text += "\tOption \"AllowPRIMEDisplayOffloadSink\" \"%s\"\n" % reverseprime_enabled_str
+        text += "\tOption \"AllowNVIDIAGPUScreens\"\n" \
+                "EndSection\n\n"
+
+        text += _make_amd_device_section(config, bus_ids, xorg_extra)
+
+        text += "Section \"Screen\"\n" \
+                "\tIdentifier \"amd\"\n" \
+                "\tDevice \"amd\"\n"
+
+        if config["nvidia"]["allow_external_gpus"] == "yes":
+            text += "\tOption \"AllowExternalGpus\"\n"
+
+        text += "EndSection\n\n"
+
+        text += _make_nvidia_device_section(config, bus_ids, xorg_extra)
+
+        text += "Section \"Screen\"\n" \
+                "\tIdentifier \"nvidia\"\n" \
+                "\tDevice \"nvidia\"\n" \
+                "EndSection\n\n"
+
+        text += _make_server_flags_section(config)
+
+        return text
 
 def _make_nvidia_device_section(config, bus_ids, xorg_extra):
 
@@ -204,22 +259,23 @@ def _make_intel_device_section(config, bus_ids, xorg_extra):
 
     logger = get_logger()
 
-    if config["intel"]["driver"] == "intel" and not _is_intel_module_available():
+    dri = int(config["igpu"]["dri"])
+
+    text = "Section \"Device\"\n"
+    text += "\tIdentifier \"intel\"\n"
+    if config["igpu"]["driver"] == "xorg" and not _is_intel_module_available():
         logger.warning("The Xorg intel module is not available. Defaulting to modesetting.")
         driver = "modesetting"
-    else:
-        driver = config["intel"]["driver"]
-
-    dri = int(config["intel"]["dri"])
-
-    text = "Section \"Device\"\n" \
-           "\tIdentifier \"intel\"\n"
+    elif config["igpu"]["driver"] == "xorg":
+        driver = "intel"
+    elif config["igpu"]["driver"] != "xorg":
+        driver = "modesetting"
     text += "\tDriver \"%s\"\n" % driver
     text += "\tBusID \"%s\"\n" % bus_ids["intel"]
-    if config["intel"]["accel"] != "":
-        text += "\tOption \"AccelMethod\" \"%s\"\n" % config["intel"]["accel"]
-    if config["intel"]["tearfree"] != "":
-        tearfree_enabled_str = {"yes": "true", "no": "false"}[config["intel"]["tearfree"]]
+    if config["igpu"]["accel"] != "":
+        text += "\tOption \"AccelMethod\" \"%s\"\n" % config["igpu"]["accel"]
+    if config["igpu"]["tearfree"] != "" and config["igpu"]["driver"] == "xorg":
+        tearfree_enabled_str = {"yes": "true", "no": "false"}[config["igpu"]["tearfree"]]
         text += "\tOption \"TearFree\" \"%s\"\n" % tearfree_enabled_str
     text += "\tOption \"DRI\" \"%d\"\n" % dri
     if "intel" in xorg_extra.keys():
@@ -229,6 +285,34 @@ def _make_intel_device_section(config, bus_ids, xorg_extra):
 
     return text
 
+def _make_amd_device_section(config, bus_ids, xorg_extra):
+
+    logger = get_logger()
+
+    dri = int(config["igpu"]["dri"])
+
+    text = "Section \"Device\"\n"
+    text += "\tIdentifier \"amd\"\n"
+    if config["igpu"]["driver"] == "xorg" and not _is_amd_module_available():
+        logger.warning("WARNING : The Xorg amdgpu module is not available. Defaulting to modesetting.")
+        driver = "modesetting"
+    elif config["igpu"]["driver"] == "xorg":
+        driver = "amdgpu"
+    elif config["igpu"]["driver"] != "xorg":
+        driver = "modesetting"
+    text += "\tDriver \"%s\"\n" % driver
+    text += "\tBusID \"%s\"\n" % bus_ids["amd"]
+    if config["igpu"]["tearfree"] != "" and config["igpu"]["driver"] == "xorg":
+        tearfree_enabled_str = {"yes": "true", "no": "false"}[config["igpu"]["tearfree"]]
+        text += "\tOption \"TearFree\" \"%s\"\n" % tearfree_enabled_str
+    text += "\tOption \"DRI\" \"%d\"\n" % dri
+    if "amd" in xorg_extra.keys():
+        for line in xorg_extra["amd"]:
+            text += ("\t" + line + "\n")
+    text += "EndSection\n\n"
+
+    return text
+
 def _make_server_flags_section(config):
     if config["nvidia"]["ignore_abi"] == "yes":
         return (
@@ -252,6 +336,8 @@ def _write_xorg_conf(xorg_conf_text):
     except IOError:
         raise XorgSetupError("Cannot write Xorg conf at %s" % str(filepath))
 
-
 def _is_intel_module_available():
     return os.path.isfile("/usr/lib/xorg/modules/drivers/intel_drv.so")
+
+def _is_amd_module_available():
+    return os.path.isfile("/usr/lib/xorg/modules/drivers/amdgpu_drv.so")
diff --git a/package/PKGBUILD b/package/PKGBUILD
index 9a0f847..5d08950 100644
--- a/package/PKGBUILD
+++ b/package/PKGBUILD
@@ -1,7 +1,7 @@
 # Maintainer: Robin Lange <robin dot langenc at gmail dot com>
 
 pkgname=optimus-manager-git
-pkgver=1.3
+pkgver=1.3.5
 pkgrel=1
 pkgdesc="Management utility to handle GPU switching for Optimus laptops (Git version)"
 arch=('any')
@@ -9,23 +9,22 @@ url="https://github.com/Askannz/optimus-manager"
 license=('MIT')
 conflicts=("optimus-manager")
 provides=("optimus-manager=$pkgver")
-depends=('python3' 'python-setuptools' 'python-dbus' 'mesa-demos' 'xorg-xrandr')
+depends=('python3' 'python-psutil' 'python-setuptools' 'python-dbus' 'mesa-demos' 'xorg-xrandr')
 optdepends=('bbswitch: alternative power switching method'
             'acpi_call: alternative power switching method'
             'xf86-video-intel: provides the Xorg intel driver')
 makedepends=('python-setuptools' 'git')
-backup=('etc/optimus-manager/xorg-intel.conf'
+backup=('etc/optimus-manager/xorg-igpu.conf'
         'etc/optimus-manager/xorg-nvidia.conf'
 
-        'etc/optimus-manager/xsetup-intel.sh'
+        'etc/optimus-manager/xsetup-igpu.sh'
         'etc/optimus-manager/xsetup-nvidia.sh'
         'etc/optimus-manager/xsetup-hybrid.sh'
 
         'etc/optimus-manager/nvidia-enable.sh'
         'etc/optimus-manager/nvidia-disable.sh'
-
         'var/lib/optimus-manager/persistent/startup_mode')
-source=("git+https://github.com/Askannz/optimus-manager.git#branch=master")
+source=("git+https://github.com/Hyper-KVM/optimus-manager.git#branch=master")
 sha256sums=('SKIP')
 
 pkgver() {
@@ -42,25 +41,51 @@ build() {
  
  
 package() {
-
-  install="optimus-manager.install"
  
   cd "${srcdir}/optimus-manager/"
- 
+  # runit
+  if [[ -n $(pgrep -a runit) ]]; then
+	install="runit.install"
+	install -Dm755 runit/optimus-manager/finish "$pkgdir/etc/runit/sv/optimus-manager/finish"
+	CONDM=0
+	echo "Choose the Display Manager you use or if none press enter."
+	read -rp "`echo $'\n	1.SDDM\n	2.LightDM\n	[1-2?]: '`" CONDM;
+	if [ "$CONDM" == "1" ]; then
+		echo "Installing SDDM runit script"
+		install -Dm755 runit/displaymanager/sddm/run "$pkgdir/etc/runit/sv/optimus-manager-sddm/run"
+		install -Dm755 runit/displaymanager/optimus-manager/run "$pkgdir/etc/runit/sv/optimus-manager/run"
+	elif [ "$CONDM" == "2" ]; then
+		echo "Installing LightDM runit script"
+		install -Dm755 runit/displaymanager/lightdm/run "$pkgdir/etc/runit/sv/optimus-manager-lightdm/run"
+		install -Dm755 runit/displaymanager/optimus-manager/run "$pkgdir/etc/runit/sv/optimus-manager/run"
+	else
+		echo "No Display Manager selected, installing standalone script"
+		install -Dm755 runit/optimus-manager/run "$pkgdir/etc/runit/sv/optimus-manager/run"
+	fi
+  # openrc
+  elif [[ -n $(pgrep -a openrc) ]]; then
+	install="openrc.install"
+	install -Dm755 openrc/optimus-manager "$pkgdir/etc/init.d/optimus-manager"
+  # systemd
+  else
+  	install="optimus-manager.install"
+	install -Dm644 systemd/optimus-manager.service "$pkgdir/usr/lib/systemd/system/optimus-manager.service"
+  fi
+
+
   install -Dm644 LICENSE "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
   install -Dm644 modules/optimus-manager.conf "$pkgdir/usr/lib/modprobe.d/optimus-manager.conf"
-  install -Dm644 systemd/optimus-manager.service "$pkgdir/usr/lib/systemd/system/optimus-manager.service"
+    
   install -Dm644 optimus-manager.conf "$pkgdir/usr/share/optimus-manager.conf"
-  
   install -Dm644 systemd/logind/10-optimus-manager.conf "$pkgdir/usr/lib/systemd/logind.conf.d/10-optimus-manager.conf"
   
   install -Dm644 login_managers/sddm/20-optimus-manager.conf "$pkgdir/etc/sddm.conf.d/20-optimus-manager.conf"
   install -Dm644 login_managers/lightdm/20-optimus-manager.conf  "$pkgdir/etc/lightdm/lightdm.conf.d/20-optimus-manager.conf"
   
-  install -Dm644 config/xorg-intel.conf "$pkgdir/etc/optimus-manager/xorg-intel.conf"
+  install -Dm644 config/xorg-igpu.conf "$pkgdir/etc/optimus-manager/xorg-igpu.conf"
   install -Dm644 config/xorg-nvidia.conf "$pkgdir/etc/optimus-manager/xorg-nvidia.conf"
   
-  install -Dm755 config/xsetup-intel.sh "$pkgdir/etc/optimus-manager/xsetup-intel.sh"
+  install -Dm755 config/xsetup-igpu.sh "$pkgdir/etc/optimus-manager/xsetup-igpu.sh"
   install -Dm755 config/xsetup-nvidia.sh "$pkgdir/etc/optimus-manager/xsetup-nvidia.sh"
   install -Dm755 config/xsetup-hybrid.sh "$pkgdir/etc/optimus-manager/xsetup-hybrid.sh"
 
diff --git a/package/openrc.install b/package/openrc.install
new file mode 100644
index 0000000..93f5cc1
--- /dev/null
+++ b/package/openrc.install
@@ -0,0 +1,30 @@
+post_install() {
+
+    echo "optimus-manager : enabling optimus-manager"
+    rc-update add optimus-manager default
+
+    bold=$(tput bold)
+    red=$(tput setaf 1)
+    normal=$(tput sgr0)
+    echo "${bold}${red}Please reboot your computer before using optimus-manager${normal}"
+
+}
+
+post_remove() {
+
+        echo "optimus-manager : cleaning up auto-generated Xorg conf"
+
+    xorg_conf=/etc/X11/xorg.conf.d/10-optimus-manager.conf
+    if [ -f "$xorg_conf" ]; then
+        rm $xorg_conf
+    fi
+
+
+    echo "optimus-manager : disabling optimus-manager"
+
+    service_file_link=/etc/init.d/optimus-manager
+    if [ -L "$service_file_link" ]; then
+        rm $service_file_link
+    fi
+
+}
diff --git a/package/runit.install b/package/runit.install
new file mode 100644
index 0000000..8813b0b
--- /dev/null
+++ b/package/runit.install
@@ -0,0 +1,31 @@
+post_install() {
+
+    echo "optimus-manager : enabling optimus-manager"
+    mkdir -p /etc/runit/sv/optimus-manager/
+    ln -sf /etc/runit/sv/optimus-manager /run/runit/service/
+
+    bold=$(tput bold)
+    red=$(tput setaf 1)
+    normal=$(tput sgr0)
+    echo "${bold}${red}Please reboot your computer before using optimus-manager${normal}"
+
+}
+post_remove() {
+
+    echo "optimus-manager : cleaning up auto-generated Xorg conf"
+
+    xorg_conf=/etc/X11/xorg.conf.d/10-optimus-manager.conf
+    if [ -f "$xorg_conf" ]; then
+        rm $xorg_conf
+    fi
+
+
+    echo "optimus-manager : disabling optimus-manager.service"
+
+    service_file_link=/run/runit/service/optimus-manager
+    if [ -L "$service_file_link" ]; then
+        rm $service_file_link     
+    fi
+
+
+}
diff --git a/runit/displaymanager/lightdm/run b/runit/displaymanager/lightdm/run
new file mode 100644
index 0000000..08789ed
--- /dev/null
+++ b/runit/displaymanager/lightdm/run
@@ -0,0 +1,6 @@
+#!/bin/sh
+sv check dbus >/dev/null || exit 1
+install -d -m0711 -olightdm -glightdm /run/lightdm
+/usr/bin/python3 -u -m optimus_manager.hooks.pre_xorg_start
+exec lightdm
+
diff --git a/runit/displaymanager/optimus-manager/finish b/runit/displaymanager/optimus-manager/finish
new file mode 100644
index 0000000..fd5cc9c
--- /dev/null
+++ b/runit/displaymanager/optimus-manager/finish
@@ -0,0 +1,3 @@
+#!/bin/sh
+/usr/bin/python3 -u -m optimus_maanger.hooks.post_daemon_stop
+
diff --git a/runit/displaymanager/optimus-manager/run b/runit/displaymanager/optimus-manager/run
new file mode 100644
index 0000000..b1ee637
--- /dev/null
+++ b/runit/displaymanager/optimus-manager/run
@@ -0,0 +1,5 @@
+#!/bin/sh
+/usr/bin/python3 -u -m optimus_manager.hooks.pre_daemon_start
+exec /usr/bin/python3 -u -m optimus_manager.daemon 
+
+
diff --git a/runit/displaymanager/sddm/run b/runit/displaymanager/sddm/run
new file mode 100644
index 0000000..6071191
--- /dev/null
+++ b/runit/displaymanager/sddm/run
@@ -0,0 +1,14 @@
+#!/bin/sh
+set -e
+sv check dbus >/dev/null || exit 1
+/usr/bin/python3 -u -m optimus_manager.hooks.pre_xorg_start
+if [ -x /usr/bin/elogind-inhibit ]; then
+        dbus-send --system --print-reply --dest=org.freedesktop.DBus \
+                /org/freedesktop/DBus                           \
+                org.freedesktop.DBus.StartServiceByName         \
+                string:org.freedesktop.login1 uint32:0
+fi
+# respect system locale
+[ -r /etc/locale.conf ] && . /etc/locale.conf && export LANG
+exec sddm 2>&1
+
diff --git a/runit/optimus-manager/finish b/runit/optimus-manager/finish
new file mode 100644
index 0000000..a84eafe
--- /dev/null
+++ b/runit/optimus-manager/finish
@@ -0,0 +1,3 @@
+#!/bin/sh
+/usr/bin/python3 -u -m optimus_manager.hooks.post_daemon_stop
+
diff --git a/runit/optimus-manager/run b/runit/optimus-manager/run
new file mode 100644
index 0000000..5c3b21a
--- /dev/null
+++ b/runit/optimus-manager/run
@@ -0,0 +1,6 @@
+#!/bin/sh
+/usr/bin/python3 -u -m optimus_manager.hooks.pre_daemon_start
+/usr/bin/python3 -u -m optimus_manager.hooks.pre_xorg_start
+exec /usr/bin/python3 -u -m optimus_manager.daemon 
+
+
diff --git a/var/startup_mode b/var/startup_mode
index a5328cb..0846816 100644
--- a/var/startup_mode
+++ b/var/startup_mode
@@ -1 +1 @@
-intel
+igpu
